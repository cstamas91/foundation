# ASP.NET Core (.NET Framework)

# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: '0'
  minor: '1'
  patch: '$(Build.BuildId)'
  ciTag: 'CI-$(Build.BuildNumber)'
  nugetVersion: ''
  producePackage: ''

steps:
- task: NuGetToolInstaller@1

- task: DotNetCoreCLI@2
  displayName: 'Build all projects'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    arguments: "--configuration $(buildConfiguration)"

- task: PowerShell@2
  displayName: 'Write control variables'
  inputs:
    targetType: inline
    script: |
      function setVarAndLog ($var, $val) {
        Write-Host "setting $var = $val";
        Write-Host "##vso[task.setvariable variable=$var]$val";
      }

      $ciBuilds = ("IndividualCI", "BatchedCI", "PullRequest");
      switch -Exact ('$(Build.Reason)') {
        { $ciBuilds -contains $_ } {
          setVarAndLog("nugetVersion", "$(major).$(minor).$(patch)-$(ciTag)");
          setVarAndLog("producePackage", "true");
        }

        Default {
          setVarAndLog("nugetVersion", "");
          setVarAndLog("producePackage", "false");
        }
      }


- task: NuGetCommand@2
  displayName: 'Pack all projects into nuget'
  condition: eq($(producePackage), 'true')
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'nugetVersion'

- task: DotNetCoreCLI@2
  displayName: 'Push packages to libs feed'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '6c464a6a-95af-4d6c-b50e-c2008380278b'